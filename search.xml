<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaWeb(五)</title>
    <url>/2020/04/26/JavaWeb-%E4%BA%94/</url>
    <content><![CDATA[<p>大家好，今天准备分享一下我最近学习的xml的相关知识以及介绍一下tomcat服务器的安装和使用，最后介绍一下HTTP协议。</p>
<hr>
<h1 id="xml的简介及其使用"><a href="#xml的简介及其使用" class="headerlink" title="xml的简介及其使用"></a>xml的简介及其使用</h1><ul>
<li><p>XML：eXtensible Markup Language 可扩展标记语言 version=”1.0”</p>
<ul>
<li><p>可扩展：所有的标签都是自定义的。  </p>
</li>
<li><p>功能：数据存储</p>
<ul>
<li>配置文件</li>
<li>数据传输</li>
</ul>
</li>
<li><p>html与xml区别：</p>
<ul>
<li>html语法松散，xml语法严格</li>
<li>html做页面展示，xml做数据存储</li>
<li>html所有标签都是预定义的，xml所有标签都是自定义的</li>
</ul>
</li>
<li><p>W3C:word wide web consortiem  万维网联盟</p>
</li>
<li><p>xml语法：</p>
<ul>
<li><p>文档声明：</p>
<ul>
<li>必须写在xml文档的第一行。</li>
<li>写法：<?xml version="1.0" ?></li>
<li>属性：    <ul>
<li>version：版本号 固定值 1.0</li>
<li>encoding:指定文档的码表。默认值为 iso-8859-1</li>
<li>standalone：指定文档是否独立  yes 或 no</li>
</ul>
</li>
</ul>
</li>
<li><p>元素：xml文档中的标签</p>
<ul>
<li>文档中必须有且只能有一个根元素</li>
<li>元素需要正确闭合。<body><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body> <br></li>
<li>元素需要正确嵌套</li>
<li>元素名称要遵守：<ul>
<li>元素名称区分大小写</li>
<li>数字不能开头</li>
</ul>
</li>
</ul>
</li>
<li><p>文本：</p>
<ul>
<li>转义字符：&gt;</li>
<li>CDATA: 里边的数据会原样显示<ul>
<li><!--[CDATA[ 数据内容 ]]-->
</li>
</ul>
</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>属性值必须用引号引起来。单双引号都行</li>
</ul>
</li>
<li><p>注释：和HTML中一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ &lt;!-- --&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理指令：</p>
<pre><code class="bash">$ &lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"1.css"</span>?&gt;</code></pre>
</li>
<li><p>xml约束：</p>
</li>
<li><p>约束就是xml的书写规则</p>
</li>
<li><p>约束的分类：<br>  dtd：</p>
<pre><code>dtd分类：
    * 内部dtd：在xml内部定义dtd
    * 外部dtd：在外部文件中定义dtd
        * 本地dtd文件：&lt;!DOCTYPE students SYSTEM  &quot;student.dtd&quot;&gt;
        * 网络dtd文件：&lt;!DOCTYPE students PUBLIC &quot;名称空间&quot;  &quot;student.dtd&quot;&gt;</code></pre><p>  schema：</p>
<pre><code>导入xsd约束文档：
        1、编写根标签
        2、引入实例名称空间 xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        3、引入名称空间 xsi:schemaLocation=&quot;http://www.itcast.cn/xml student.xsd&quot;    
        4、引入默认的名称空间</code></pre></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="tomcat-服务器"><a href="#tomcat-服务器" class="headerlink" title="tomcat 服务器"></a>tomcat 服务器</h1><h2 id="tomcat的下载"><a href="#tomcat的下载" class="headerlink" title="tomcat的下载"></a>tomcat的下载</h2><ul>
<li>tomcat官方站点 <a href="http://tomcat.apache.org" target="_blank" rel="noopener">tomcat官网</a></li>
</ul>
<h2 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h2><ul>
<li>直接解压到指定目录即可。（注：目录不要太深；目录不要有中文或空格）</li>
</ul>
<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><ul>
<li>以我自己的为例: F:\apache-tomcat-7.0.52\bin\startup.bat</li>
<li>注：启动服务的前提：<ul>
<li>配置JAVA_HOME：F:\apache-tomcat-7.0.52\bin\startup.bat 才能执行命令</li>
<li>配置CATALINA_HOME: F:\apache-tomcat-7.0.52<ul>
<li>startup.bat 启动命令</li>
<li>shutdown.bat 停止命令</li>
</ul>
</li>
<li>如果tomcat端口被占用，解决办法</li>
<li>1、修改F:\apache-tomcat-7.0.52\conf\server.xml<pre><code>第70行：  &lt;Connector port=&quot;8081&quot;/&gt;</code></pre></li>
<li>2、 关闭端口号对应的进程：<pre><code>cmd--&gt;netstat -ano --&gt;找到pid--&gt;任务管理器--&gt;显示pid--&gt;关闭进程</code></pre></li>
</ul>
</li>
</ul>
<h2 id="测试服务是否启动成功"><a href="#测试服务是否启动成功" class="headerlink" title="测试服务是否启动成功"></a>测试服务是否启动成功</h2><ul>
<li>在浏览器地址栏输入 <a href="http://loaclhost:8080" target="_blank" rel="noopener">http://loaclhost:8080</a><br><img src="1.png" alt></li>
<li>其他的关于tomcat目录结构，在<a href="https://ferryman-jack.github.io/2019/10/30/JavaWeb-%E4%B8%80/" target="_blank" rel="noopener">JavaWeb(一)</a>有介绍，可以前往查看。</li>
</ul>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="http协议概述"><a href="#http协议概述" class="headerlink" title="http协议概述"></a>http协议概述</h2><ul>
<li>HTTP是HyperText Transfer Protocol(超文本传输协议)的简写，传输HTML文件。</li>
<li>用于定义WEB浏览器与WEB服务器之间交换数据的过程及数据本身的格式。</li>
</ul>
<h2 id="请求部分"><a href="#请求部分" class="headerlink" title="请求部分"></a>请求部分</h2><p><img src="2.png" alt></p>
<h3 id="请求消息行"><a href="#请求消息行" class="headerlink" title="请求消息行"></a>请求消息行</h3><ul>
<li>GET  /day08_02/1.html  HTTP/1.1(协议/版本)</li>
<li>请求方式：Get（默认）  POST  DELETE  HEAD等<ul>
<li>GET：明文传输 不安全，数据量有限，不超过1kb</li>
<li>GET /day08_02/1.html?uName=tom&amp;pwd=123 HTTP/1.1</li>
<li>POST: 暗文传输，安全。数据量没有限制。</li>
</ul>
</li>
<li>URI：统一资源标识符。去协议和IP地址。</li>
</ul>
<h3 id="请求消息头"><a href="#请求消息头" class="headerlink" title="请求消息头"></a>请求消息头</h3><ul>
<li><p>从第2行到空行处，都叫消息头</p>
<ul>
<li><p>Accept:浏览器可接受的MIME类型<br>   告诉服务器客户端能接收什么样类型的文件。</p>
</li>
<li><p>Accept-Charset: 浏览器通过这个头告诉服务器，它支持哪种字符集</p>
</li>
<li><p>Accept-Encoding:浏览器能够进行解码的数据编码方式，比如gzip </p>
</li>
<li><p>Accept-Language:浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。 可以在浏览器中进行设置。</p>
</li>
<li><p>Host:初始URL中的主机和端口 </p>
</li>
<li><p>Referrer:包含一个URL，用户从该URL代表的页面出发访问当前请求的页面 </p>
</li>
<li><p>Content-Type:内容类型<br>  告诉服务器浏览器传输数据的MIME类型，文件传输的类型 application/x-www-form-urlencoded</p>
</li>
<li><p>If-Modified-Since: Wed, 02 Feb 2011 12:04:56 GMT利用这个头与服务器的文件进行比对，如果一致，则从缓存中直接读取文件。</p>
</li>
<li><p>User-Agent:浏览器类型.</p>
</li>
<li><p>Content-Length:表示请求消息正文的长度 </p>
</li>
<li><p>Connection:表示是否需要持久连接。如果服务器看到这里的值为“Keep -Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接 </p>
</li>
<li><p>Cookie:这是最重要的请求头信息之一</p>
</li>
<li><p>Date：Date: Mon, 22 Aug 2011 01:55:39 GMT请求时间GMT</p>
</li>
</ul>
</li>
</ul>
<h3 id="消息正文"><a href="#消息正文" class="headerlink" title="消息正文:"></a>消息正文:</h3><ul>
<li>当请求方式是POST方式时，才能看见消息正文<br>uName=tom&amp;pwd=123</li>
</ul>
<h2 id="响应部分"><a href="#响应部分" class="headerlink" title="响应部分"></a>响应部分</h2><p><img src="3.png" alt></p>
<h3 id="响应消息行"><a href="#响应消息行" class="headerlink" title="响应消息行"></a>响应消息行</h3><ul>
<li>第一行：<ul>
<li>HTTP/1.1   200   OK</li>
<li>协议/版本   响应状态码  对响应码的描述（一切正常）</li>
</ul>
</li>
<li>响应状态码：常用的就40多个。<ul>
<li>200(正常)  一切正常</li>
<li>302/307(临时重定向)</li>
<li>304(未修改) 表示客户机缓存的版本是最新的，客户机可以继续使用它，无需到服务器请求。</li>
<li>404(找不到)  服务器上不存在客户机所请求的资源。</li>
<li>500(服务器内部错误)</li>
</ul>
</li>
</ul>
<h3 id="响应消息头"><a href="#响应消息头" class="headerlink" title="响应消息头"></a>响应消息头</h3><ul>
<li>Location: <class color="black"><a href="http://www.it315.org/index.jsp指示新的资源的位置" target="_blank" rel="noopener">http://www.it315.org/index.jsp指示新的资源的位置</a></class><pre><code>通常和302/307一起使用，完成请求重定向</code></pre></li>
<li>Server:apache tomcat指示服务器的类型</li>
<li>Content-Encoding: gzip服务器发送的数据采用的编码类型</li>
<li>Content-Length: 80 告诉浏览器正文的长度</li>
<li>Content-Language: zh-cn服务发送的文本的语言</li>
<li>Content-Type: text/html; charset=GB2312服务器发送的内容的MIME类型</li>
<li>Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT文件的最后修改时间</li>
<li>Refresh: 1;url=<a href="http://www.it315.org指示客户端刷新频率。单位是秒" target="_blank" rel="noopener">http://www.it315.org指示客户端刷新频率。单位是秒</a></li>
<li>Content-Disposition: attachment; filename=aaa.zip指示客户端下载文件</li>
<li>Set-Cookie:SS=Q0=5Lb_nQ; path=/search服务器端发送的Cookie</li>
<li>Expires: -1</li>
<li>Cache-Control: no-cache (1.1)  </li>
<li>Pragma: no-cache   (1.0)  表示告诉客户端不要使用缓存</li>
<li>Connection: close/Keep-Alive   </li>
<li>Date: Tue, 11 Jul 2000 18:23:51 GMT</li>
</ul>
<h3 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h3><ul>
<li>和网页右键“查看源码”看到的内容一样。</li>
</ul>
<hr>
<p>最后谢谢各位看官的支持，我会继续写下去的。</p>
<blockquote>
    <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote>


]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>xml简介及tomcat的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb(四)</title>
    <url>/2020/04/25/JavaWeb-%E5%9B%9B/</url>
    <content><![CDATA[<p>今天主要分享一下JDBC规范、如何在程序中如何使用JDBC还有JDBC中常用的类和接口。</p>
<hr>
<h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>   &nbsp;Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的。</p>
<h2 id="为什么要使用JDBC？"><a href="#为什么要使用JDBC？" class="headerlink" title="为什么要使用JDBC？"></a>为什么要使用JDBC？</h2><p>   JDBC:java database connectivity SUN公司提供的一套操作数据库的标准规范。<br>   JDBC与数据库驱动的关系：接口与实现的关系。</p>
<h2 id="JDBC规范（掌握四个核心对象）："><a href="#JDBC规范（掌握四个核心对象）：" class="headerlink" title="JDBC规范（掌握四个核心对象）："></a>JDBC规范（掌握四个核心对象）：</h2><p>   DriverManager:用于注册驱动<br>   Connection: 表示与数据库创建的连接<br>   Statement: 操作数据库sql语句的对象<br>   ResultSet: 结果集或一张虚拟表</p>
<h2 id="开发第一个JDBC的程序的准备："><a href="#开发第一个JDBC的程序的准备：" class="headerlink" title="开发第一个JDBC的程序的准备："></a>开发第一个JDBC的程序的准备：</h2><ul>
<li>首先说一下JDBC规范在哪里？<br>JDK中:<br>  java.sql下的所有类;<br>  javax.sql下的所有类;</li>
<li>数据库厂商提供的驱动：jar文件<br><img src="1.png" alt></li>
</ul>
<h1 id="第一个JDBC程序的开发"><a href="#第一个JDBC程序的开发" class="headerlink" title="第一个JDBC程序的开发"></a>第一个JDBC程序的开发</h1><h2 id="实现查询数据库信息在java控制台打印"><a href="#实现查询数据库信息在java控制台打印" class="headerlink" title="实现查询数据库信息在java控制台打印"></a>实现查询数据库信息在java控制台打印</h2><h3 id="首先创建数据库与表"><a href="#首先创建数据库与表" class="headerlink" title="首先创建数据库与表"></a>首先创建数据库与表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ create database day06;</span><br><span class="line">use day06;</span><br><span class="line"></span><br><span class="line">create table users(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	name varchar(40),</span><br><span class="line">	password varchar(40),</span><br><span class="line">	email varchar(60),</span><br><span class="line">	birthday date</span><br><span class="line">)character <span class="built_in">set</span> utf8 collate utf8_general_ci;</span><br><span class="line"></span><br><span class="line">insert into users(name,password,email,birthday) values(<span class="string">'zs'</span>,<span class="string">'123456'</span>,<span class="string">'zs@sina.com'</span>,<span class="string">'1980-12-04'</span>);</span><br><span class="line">insert into users(name,password,email,birthday) values(<span class="string">'lisi'</span>,<span class="string">'123456'</span>,<span class="string">'lisi@sina.com'</span>,<span class="string">'1981-12-04'</span>);</span><br><span class="line">insert into users(name,password,email,birthday) values(<span class="string">'wangwu'</span>,<span class="string">'123456'</span>,<span class="string">'wangwu@sina.com'</span>,<span class="string">'1979-12-04'</span>);</span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt></p>
<h3 id="接着创建java-project项目，添加数据库驱动（Jar包）"><a href="#接着创建java-project项目，添加数据库驱动（Jar包）" class="headerlink" title="接着创建java project项目，添加数据库驱动（Jar包）"></a>接着创建java project项目，添加数据库驱动（Jar包）</h3><p>这个步骤就不演示了，自己应该会做哦。</p>
<h3 id="实现JDBC的操作"><a href="#实现JDBC的操作" class="headerlink" title="实现JDBC的操作"></a>实现JDBC的操作</h3><ul>
<li>1、注册驱动</li>
<li>2、创建连接</li>
<li>3、得到执行sql语句的Statement对象</li>
<li>4、执行sql语句，并返回结果</li>
<li>5、处理结果</li>
<li>6、关闭资源<br><img src="3.png" alt><br><img src="4.png" alt></li>
</ul>
<h1 id="JDBC常用类和接口详解"><a href="#JDBC常用类和接口详解" class="headerlink" title="JDBC常用类和接口详解"></a>JDBC常用类和接口详解</h1><h2 id="java-sql-Drivermanager类-创建连接"><a href="#java-sql-Drivermanager类-创建连接" class="headerlink" title="java.sql.Drivermanager类 : 创建连接"></a>java.sql.Drivermanager类 : 创建连接</h2><ul>
<li><p>a.注册驱动 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ DriverManager.registerDriver(new com.mysql.jdbc.Driver());不建议使用</span><br><span class="line">$ 原因有2个：</span><br><span class="line">  导致驱动被注册2次。</span><br><span class="line">  强烈依赖数据库的驱动jar</span><br><span class="line">解决办法：</span><br><span class="line">使用Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);来进行注册驱动</span><br></pre></td></tr></table></figure>
</li>
<li><p>b.与数据库建立连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ static Connection getConnection(String url, String user, String password)  试图建立到给定数据库 URL 的连接</span><br><span class="line">$ getConnection(<span class="string">"jdbc:mysql://localhost:3306/day06"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">$ URL:SUN公司与数据库厂商之间的一种协议。</span><br><span class="line">  jdbc:mysql://localhost:3306/day06</span><br><span class="line">  协议 子协议  IP :端口号 数据库</span><br><span class="line">  mysql: jdbc:mysql://localhost:3306/day14 或者 jdbc:mysql:///day14（默认本机连接）</span><br><span class="line">  oracle: jdbc:oracle:thin:@localhost:1521:sid</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="java-sql-Connection接口-一个连接"><a href="#java-sql-Connection接口-一个连接" class="headerlink" title="java.sql.Connection接口:一个连接"></a>java.sql.Connection接口:一个连接</h2><pre><code>接口的实现在数据库驱动中。所有与数据库交互都是基于连接对象的。
Statement  createStatement(); //创建操作sql语句的对象</code></pre><h2 id="java-sql-Statement接口-操作sql语句，并返回相应的结果的对象-小货车"><a href="#java-sql-Statement接口-操作sql语句，并返回相应的结果的对象-小货车" class="headerlink" title="java.sql.Statement接口:操作sql语句，并返回相应的结果的对象()小货车"></a>java.sql.Statement接口:操作sql语句，并返回相应的结果的对象()小货车</h2><ul>
<li>接口的实现在数据库驱动中。用于执行静态 SQL 语句并返回它所生成结果的对象。</li>
<li>ResultSet  executeQuery(String sql) 根据查询语句返回结果集。只能执行select语句。</li>
<li>int executeUpdate(String sql) 根据执行的DML（insert update delete）语句，返回受影响的行数。</li>
<li>oolean execute(String sql)此方法可以执行任意sql语句。返回boolean值，表示是否返回ResultSet结果集。仅当执行select语句，且有返回结果时返回true, 其它语句都返回false;</li>
</ul>
<h2 id="java-sql-ResultSet接口-结果集（客户端存表数据的对象）"><a href="#java-sql-ResultSet接口-结果集（客户端存表数据的对象）" class="headerlink" title="java.sql.ResultSet接口: 结果集（客户端存表数据的对象）"></a>java.sql.ResultSet接口: 结果集（客户端存表数据的对象）</h2><h3 id="封装结果集的"><a href="#封装结果集的" class="headerlink" title="封装结果集的"></a>封装结果集的</h3><ul>
<li>提供一个游标，默认游标指向结果集第一行之前。</li>
<li>调用一次next()，游标向下移动一行。</li>
<li>提供一些get方法。</li>
<li>封装数据的方法<br>  a、 Object getObject(int columnIndex); 根据序号取值，索引从1开始<br>  b、 Object getObject(String ColomnName); 根据列名取值。</li>
<li>将结果集中的数据封装到javaBean中<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java的数据类型与数据库中的类型的关系</span><br><span class="line">     byte          tityint</span><br><span class="line">     short         smallint</span><br><span class="line">     int           int</span><br><span class="line">     long          bigint</span><br><span class="line">     <span class="built_in">float</span>         <span class="built_in">float</span></span><br><span class="line">     double        double</span><br><span class="line">     String        char varchar </span><br><span class="line">     Date          date</span><br><span class="line">$ 下面是一些方法：</span><br><span class="line">boolean next()	将光标从当前位置向下移动一行</span><br><span class="line">int getInt(int colIndex)	以int形式获取ResultSet结果集当前行指定列号值</span><br><span class="line">int getInt(String colLabel)	以int形式获取ResultSet结果集当前行指定列名值</span><br><span class="line"><span class="built_in">float</span> getFloat(int colIndex)	以<span class="built_in">float</span>形式获取ResultSet结果集当前行指定列号值</span><br><span class="line"><span class="built_in">float</span> getFloat(String colLabel)	以<span class="built_in">float</span>形式获取ResultSet结果集当前行指定列名值</span><br><span class="line">String getString(int colIndex)	以String 形式获取ResultSet结果集当前行指定列号值</span><br><span class="line">String getString(String colLabel)	以String形式获取ResultSet结果集当前行指定列名值</span><br><span class="line">Date getDate(int columnIndex);  </span><br><span class="line">Date getDate(String columnName);</span><br><span class="line">void close()	关闭ResultSet 对象</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="可移动游标的方法"><a href="#可移动游标的方法" class="headerlink" title="可移动游标的方法"></a>可移动游标的方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">boolean next()  将光标从当前位置向前移一行。</span><br><span class="line">boolean previous() 将光标移动到此 ResultSet 对象的上一行。</span><br><span class="line">boolean absolute(int row) 参数是当前行的索引，从1开始  根据行的索引定位移动的指定索引行。</span><br><span class="line">void afterLast()  将光标移动到末尾，正好位于最后一行之后。</span><br><span class="line">void beforeFirst() 将光标移动到开头，正好位于第一行之前。</span><br></pre></td></tr></table></figure>

<h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><h4 id="资源有限，正确关闭"><a href="#资源有限，正确关闭" class="headerlink" title="资源有限，正确关闭"></a>资源有限，正确关闭</h4><p><img src="5.png" alt><br><img src="6.png" alt></p>
<h1 id="SQL注入问题：preparedStatement"><a href="#SQL注入问题：preparedStatement" class="headerlink" title="SQL注入问题：preparedStatement"></a>SQL注入问题：preparedStatement</h1><ul>
<li>preparedStatement：预编译对象,是Statement对象的子类。</li>
<li>特点：<br>  a、性能要高<br>  b、会把sql语句先编译<br>  c、sql语句中的参数会发生变化，过滤掉用户输入的关键字。<br><img src="7.png" alt><br>补充一个例子：<br><img src="8.png" alt><blockquote>
  <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote></li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb(三)</title>
    <url>/2020/04/24/%E2%80%9CJavaWeb-%E4%B8%89/</url>
    <content><![CDATA[<p>本篇主要介绍css、css中的标签的使用以及盒子模型，最后简单介绍一下js，感兴趣的可以自己找相关课程进行学习，因为这个内容对javaweb不是重要内容，所以就不做详解。</p>
<hr>
<h1 id="css的简介"><a href="#css的简介" class="headerlink" title="css的简介"></a>css的简介</h1><h2 id="什么是css"><a href="#什么是css" class="headerlink" title="什么是css"></a>什么是css</h2><pre><code>层叠样式表，css是对html进行样式修饰语言
层叠：就是层层覆盖叠加，如果不同的css样式对同一html标签进行修饰，样式有冲突的部分应用优先级高的，不冲突的部分共同作用
样式表：就是css属性样式的集合    </code></pre><h2 id="css的作用"><a href="#css的作用" class="headerlink" title="css的作用"></a>css的作用</h2><pre><code>(1)修饰html的 使其html样式更加好看
(2)提高样式代码的复用性
(3)html的内容与样式相分离 便于后期维护    </code></pre><h2 id="css的引入方式和书写规范"><a href="#css的引入方式和书写规范" class="headerlink" title="css的引入方式和书写规范"></a>css的引入方式和书写规范</h2><pre><code>(1)内嵌样式
    内嵌样式是把css的代码嵌入到html标签中
    &lt;div style=&quot;color:red;font-size: 100px;&quot;&gt;你好啊 小朋友&lt;/div&gt;
    语法：
        (1)使用style属性将样式嵌入到html标签中
        (2)属性的写法：属性：属性值
        (3)多个属性之间使用分号;隔开
    不建议使用
(2)内部样式
    在head标签中使用style标签进行css的引入
    &lt;style type=&quot;text/css&quot;&gt;
        div{color:red;font-size: 100px;}
    &lt;/style&gt;
    语法：
        (1)使用style标签进行css的引入
            &lt;style type=&quot;text/css&quot;&gt;
                属性：type：告知浏览器使用css解析器去解析
        (2)属性的写法：属性：属性值
        (3)多个属性之间使用分号;隔开

(3)外部样式
    将css样式抽取成一个单独css文件 谁去使用谁就引用
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;demo1.css&quot;/&gt;
    语法：
        (1)创建css文件 将css属性写在css文件中
        (2)在head中使用link标签进行引入
            &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css文件地址&quot;/&gt;
            rel:代表要引入的文件与html的关系
            type：告知浏览器使用css解析器去解析
            href：css文件地址
        (3)属性的写法：属性：属性值
        (4)多个属性之间使用分号;隔开
(4)@import方式
    &lt;style type=&quot;text/css&quot;&gt;
        @import url(&quot;css地址&quot;);
    &lt;/style&gt;
    link与@import方式的区别：
        (1)link所有浏览器都支持 import部分低版本IE不支持
        (2)import方式是等待html加载完毕之后在加载
        (3)import方式不支持js的动态修改</code></pre><h1 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><pre><code>(1)元素选择器
    语法：html标签名{css属性}
    示例：
        &lt;span&gt;hello css!!!&lt;/span&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            span{color:red;font-size:100px; }
        &lt;/style&gt;
(2)id选择器    id唯一性
    语法：#id的值{css属性}
    示例：
        &lt;div id=&quot;div1&quot;&gt;hello css1!!!&lt;/div&gt;
        &lt;div id=&quot;div2&quot;&gt;hello css2!!!&lt;/div&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            #div1{background-color: red;}
            #div2{background-color: pink;}
        &lt;/style&gt;
(3)class选择器
    语法：.class的值{css属性}
    示例：
        &lt;div class=&quot;style1&quot;&gt;div1&lt;/div&gt;
        &lt;div class=&quot;style1&quot;&gt;div2&lt;/div&gt;
        &lt;div class=&quot;style2&quot;&gt;div3&lt;/div&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            .style1{background-color: red}
            .style2{background-color: pink}
        &lt;/style&gt;
***选择器的优先级：id&gt;class&gt;元素    </code></pre><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><pre><code>语法：基本选择器[属性=‘属性值’]{css属性}
示例：
    &lt;form action=&quot;&quot;&gt;
        name:&lt;input type=&quot;text&quot; /&gt;&lt;br/&gt;
        pass:&lt;input type=&quot;password&quot; /&gt;&lt;br/&gt;
    &lt;/form&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        input[type=&apos;text&apos;]{background-color: yellow}
        input[type=&apos;password&apos;]{background-color: pink}
    &lt;/style&gt;        </code></pre><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><pre><code>a标签的伪元素选择器
    语法：
        静止状态    a:link{css属性}
        悬浮状态    a:hover{css属性}
        触发状态    a:active{css属性}
        完成状态    a:visited{css属性}
    示例：
        &lt;a href=&quot;#&quot;&gt;点击我吧&lt;/a&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            a:link{color:blue}
            a:hover{color:red}
            a:active{color:yellow}
            a:visited{color:green}
        &lt;/style&gt;    </code></pre><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><pre><code>语法：父级选择器 子级选择器 .....
示例：
    &lt;div id=&quot;d1&quot;&gt;
        &lt;div class=&quot;dd1&quot;&gt;
            &lt;span&gt;span1-1&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&quot;dd2&quot;&gt;
            &lt;span&gt;span1-2&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;d2&quot;&gt;
        &lt;div class=&quot;dd1&quot;&gt;
            &lt;span&gt;span1-1&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&quot;dd2&quot;&gt;
            &lt;span&gt;span1-2&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;style type=&quot;text/css&quot;&gt;
        #d1 .dd2 span{color:red}
    &lt;/style&gt;</code></pre><h1 id="三、css属性"><a href="#三、css属性" class="headerlink" title="三、css属性"></a>三、css属性</h1><h2 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h2><pre><code>font-size:大小
font-family:字体类型        </code></pre><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><pre><code>color:颜色
text-decoration:下划线
    属性值：none    underline    
text-align:对齐方式
    属性值：left  center  right
    &lt;div&gt;hello css!!!&lt;/div&gt;
    &lt;a href=&quot;#&quot;&gt;click me!!!&lt;/a&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        div{color:red;text-decoration: underline;text-align: right }
        a{text-decoration: none;}
    &lt;/style&gt;</code></pre><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><pre><code>background-color:背景颜色
background-image:背景图片
    属性值：url(&quot;图片地址&quot;);
background-repeat:平铺方式
    属性值：默认横向纵向平铺
            repeat:横向纵向平铺
            no-repeat:不平铺
            repeat-y：纵向
            repeat-x：横向

body{
    background-color: black;
    background-image: url(&quot;images/dog.gif&quot;);
    background-repeat: repeat-y;
}</code></pre><h2 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h2><pre><code>list-style-type:列表项前的小标志
    属性值：太多了
list-style-image:列表项前的小图片
    属性值：url(&quot;图片地址&quot;);

    &lt;ul&gt;
        &lt;li&gt;黑马程序员&lt;/li&gt;
        &lt;li&gt;黑马程序员&lt;/li&gt;
        &lt;li&gt;黑马程序员&lt;/li&gt;
        &lt;li&gt;黑马程序员&lt;/li&gt;
    &lt;/ul&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        /* ul{list-style-type: decimal-leading-zero;} */
        ul{list-style-image: url(&quot;images/forward.gif&quot;);}
    &lt;/style&gt;</code></pre><h2 id="尺寸属性"><a href="#尺寸属性" class="headerlink" title="尺寸属性"></a>尺寸属性</h2><pre><code>width:宽度
height:高度
    &lt;div id=&quot;d1&quot;&gt;div1&lt;/div&gt;
    &lt;div id=&quot;d2&quot;&gt;div2&lt;/div&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        #d1{background-color: red;width: 200px;height: 200px;}
        #d2{background-color: pink;width: 200px;height: 200px;}
    &lt;/style&gt;</code></pre><h2 id="显示属性"><a href="#显示属性" class="headerlink" title="显示属性"></a>显示属性</h2><pre><code>display:
    属性值：none:隐藏
            block:块级显示
            inline：行级显示

    &lt;form action=&quot;&quot;&gt;
        name:&lt;input id=&quot;name&quot; type=&quot;text&quot; /&gt;&lt;span id=&quot;span&quot;&gt;对不起 输入不符合要求&lt;/span&gt;
        &lt;br&gt;
        pass:&lt;input id=&quot;pass&quot; type=&quot;password&quot; /&gt;
        &lt;br&gt;
        &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;button&quot; /&gt;
    &lt;/form&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        span{color:red;display: none}
    &lt;/style&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        document.getElementById(&quot;btn&quot;).onclick = function(){
            document.getElementById(&quot;span&quot;).style.display = &quot;inline&quot;;
        };
    &lt;/script&gt;</code></pre><h2 id="7、浮动属性"><a href="#7、浮动属性" class="headerlink" title="7、浮动属性"></a>7、浮动属性</h2><pre><code>float:
    属性值：left  right
            clear:清除浮动 left right both
    缺点：    (1)影响相邻元素不能正常显示
            (2)影响父元素不能正常显示</code></pre><h1 id="四、css盒子模型"><a href="#四、css盒子模型" class="headerlink" title="四、css盒子模型"></a>四、css盒子模型</h1><pre><code>border:
    border-width:边框的宽度
    border-color:边框的颜色
    border-style:边框的线型

    border-top:上边框
    border-bottom:下边框
    border-left:左边框
    border-right:右边框

padding:
    代表边框内壁与内部元素之间的距离
    padding:10px;代表上下左右都是10px
    padding:1px 2px 3px 4px;上右下左
    padding:1px 2px;上下/左右
    padding:1px 2px 3px;
    padding-top:单独设置
margin:
    代表边框外壁与其他元素之间的距离
    margin:10px;代表上下左右都是10px
    margin:1px 2px 3px 4px;上右下左
    margin:1px 2px;上下/左右
    margin:1px 2px 3px;
    margin-top:单独设置</code></pre><h1 id="js的简介"><a href="#js的简介" class="headerlink" title="js的简介"></a>js的简介</h1><h2 id="js是什么"><a href="#js是什么" class="headerlink" title="js是什么"></a>js是什么</h2><pre><code>js是可以嵌入到html中，是 基于对象 和 事件驱动 的 脚本语言
特点：
    (1)交互性
    (2)安全性：js不能访问本地磁盘
    (3)跨平台：浏览器中都具备js解析器</code></pre><h2 id="js能做什么"><a href="#js能做什么" class="headerlink" title="js能做什么"></a>js能做什么</h2><pre><code>(1)js能动态的修改(增删)html和css的代码
(2)能动态的校验数据</code></pre><h2 id="js历史及组成"><a href="#js历史及组成" class="headerlink" title="js历史及组成"></a>js历史及组成</h2><pre><code>ECMAScript    BOM(浏览器对象模型)  DOM(文档对象模型)    </code></pre><h2 id="js被引入的方式"><a href="#js被引入的方式" class="headerlink" title="js被引入的方式"></a>js被引入的方式</h2><pre><code>(1)内嵌脚本
    &lt;input type=&quot;button&quot; value=&quot;button&quot; onclick=&quot;alert(&apos;xxx&apos;)&quot; /&gt;            
(2)内部脚本
    &lt;script type=&quot;text/javascript&quot;&gt;
        alert(&quot;xxx&quot;);
    &lt;/script&gt;
(3)外部脚本
    首先先创建一个js文件
    其次在html中引入
        &lt;script type=&quot;text/javascript&quot; src=&quot;demo1.js&quot;&gt;&lt;/script&gt;
js代码放在哪？
    放在哪都行 但是在不影响html功能的前提下 越晚加载越好</code></pre><h1 id="js基本语法"><a href="#js基本语法" class="headerlink" title="js基本语法"></a>js基本语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>(1)
var x = 5;
x = &apos;javascript&apos;;
var y = &quot;hello&quot;;
var b = true;
(2)
x = 5;</code></pre><h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><pre><code>(1)number:数字类型
(2)string：字符串类型
(3)boolean:布尔类型
(4)null:空类型
(5)underfind:未定义

注意：number、boolean、string是伪对象

类型转换：
    number\boolean转成string
        toString();
    string\boolean转成number
        parseInt()
        parseFloat()
        boolean不能转
        string可以将数字字符串转换成number 如果“123a3sd5” 转成123
    强制转换
        Boolean()     强转成布尔
            数字强转成布尔  非零就是true   零就是false
            字符串强转成布尔  非“”(空字符串)就是true   空字符串“”就是false
        Number()    强转成数字
            布尔转数字 true转成1  false转成0
            字符串转数字 不能强转</code></pre><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><pre><code>java:    Object obj = new Object();
js:        var obj = new Object();
        var num = new Number();    </code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre><code>(1)赋值运算符
    var x = 5;
(2)算数运算符
    + - * / %
    +: 遇到字符串变成连接
    -：先把字符串转成数字然后进行运算
    *: 先把字符串转成数字然后进行运算
    /: 先把字符串转成数字然后进行运算
(3)逻辑运算符
    &amp;&amp;    ||
(4)比较运算符
    &lt;    &gt;    &gt;=    &lt;=    !=    ==
    ===:全等：类型与值都要相等
(5)三元运算符
    3&lt;2?&quot;大于&quot;:&quot;小于&quot;
(6)void运算符
    &lt;a href=&quot;javascript:void(0);&quot;&gt;xxxxxx&lt;/a&gt;
(7)类型运算符
    typeof:判断数据类型 返回我的数据类型
    instanceof：判断数据类型 是否是某种类型
    var obj = new Object();
    alert(typeof obj);//object
    alert(obj instanceof Object);//true</code></pre><h2 id="逻辑语句"><a href="#逻辑语句" class="headerlink" title="逻辑语句"></a>逻辑语句</h2><pre><code>(1)if-else
    //条件:
    //数字非0 字符串非空====true
        if(9){
            alert(&quot;true--&quot;);
        }else{
            alert(&quot;false--&quot;);
        }
(2)switch
    var x = &quot;java&quot;;
    switch(x){
        case &quot;css&quot;:
            alert(&quot;css&quot;);
            break;
        case &quot;js&quot;:
            alert(&quot;js&quot;);
            break;
        case &quot;java&quot;:
            alert(&quot;java&quot;);
            break;
        default:
            alert(&quot;def&quot;);
    }

(3)for
     for(var i = 0;i&lt;5;i++){
        alert(i);
     }
(4)for in
    var arr = [1,3,5,7,&quot;js&quot;];
     for(index in arr){//index代表角标
        //alert(index);
        alert(arr[index]);
     }</code></pre><hr>
<blockquote>
    <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote>]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>css的简介、其中的标签以及盒子模型</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb(二)</title>
    <url>/2020/04/24/JavaWeb-%E4%BA%8C/</url>
    <content><![CDATA[<p>今天主要介绍一下什么是HTML、HTML标签以及其中的细节问题。</p>
<hr>
<h1 id="html简介"><a href="#html简介" class="headerlink" title="html简介"></a>html简介</h1><h2 id="html是什么"><a href="#html是什么" class="headerlink" title="html是什么"></a>html是什么</h2><pre><code>Html是用来描述网页的一种语言。
    (1)HTML 指的是超文本标记语言 (Hyper Text Markup Language)
    (2)HTML 不是一种编程语言，而是一种标记语言(markup language,标记语言是一套标记标签(markup tag));
    (3)HTML 使用标记标签来描述网页

超文本 标记 语言
    语言：
        人与计算机交互的工具
    超文本：
        (1)普通文本不能实现的，超文本可以实现，能实现普通文本不能实现的功能
        (2)包括超链接的文本
    标记：
        就是标签，不同的标签能实现不同的功能</code></pre><h2 id="html能做什么"><a href="#html能做什么" class="headerlink" title="html能做什么"></a>html能做什么</h2><pre><code>html通过标签的形式将信息展示给用户</code></pre><h2 id="html书写规范"><a href="#html书写规范" class="headerlink" title="html书写规范"></a>html书写规范</h2><pre><code>(1)html结构
    &lt;html&gt;
        &lt;head&gt;
            包括资讯信息：整个页面的属性、指导浏览器解析的标签、引入外部文件的标签
        &lt;/head&gt;
        &lt;body&gt;
            我们需要展示的信息
        &lt;/body&gt;
    &lt;/html&gt;
(2)html标签是以尖括号包裹关键字成对出现的，有开始标签和结束标签，支持正确的嵌套
(3)大部分标签有属性 格式：属性=“属性值”（多个属性之间用空格隔开）
(4)空标签：功能比较单一 ，例如：&lt;br&gt;&lt;/br&gt; === &lt;br/&gt;
(5)html不区分大小写，建议使用小写

需求：写一段文字，将其中的部分文字变成红色，字号变大
&lt;html&gt;
    &lt;head&gt;&lt;/head&gt;
    &lt;body&gt;
        我请大家吃狗不理&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;包子&lt;/font&gt;，
        &lt;br/&gt;
        大家很高兴！！！
    &lt;/body&gt;
&lt;/html&gt;</code></pre><h1 id="html基本标签"><a href="#html基本标签" class="headerlink" title="html基本标签"></a>html基本标签</h1><h2 id="文件标签-结构标签"><a href="#文件标签-结构标签" class="headerlink" title="文件标签(结构标签)"></a>文件标签(结构标签)</h2><pre><code>&lt;html&gt;&lt;html&gt;:根标签
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;:页面的标题
&lt;/head&gt;
&lt;body&gt;&lt;/body&gt;：内容
    属性：
        text:文本的颜色
        bgcolor:背景色
        background:背景图片

    颜色的三种表示方式：
        (1)单词：red green black 
        (2)rgb三原色：reg(0,0,0)  0-255
        (3)#000000  #ffffff  #325687   #377405</code></pre><h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><pre><code>(1)注释标签：&lt;!--注释--&gt;
(2)换行标签：&lt;br/&gt;
(3)段落标签：&lt;p&gt;文本文字&lt;/p&gt; 
    特点：段与段之间有空行
    属性：
        align:对齐方式（有三个属性值：left  center   right）
(4)水平线标签：&lt;hr/&gt;
    属性：
        width:长度
        size:粗度
        color：颜色
        align:对齐方式

    尺寸的写法：
        （1）像素：10px
        （2）百分比：占据副标签的百分比，会随着副标签的大小进行变化</code></pre><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><pre><code>&lt;div&gt;&lt;/div&gt;:行级块标签
&lt;span&gt;&lt;/span&gt;:行内块标签

作用：
    （1）&lt;div&gt;&lt;/div&gt;：div+css布局
    （2）&lt;span&gt;&lt;/span&gt;：进行友好提示</code></pre><h2 id="文字标签"><a href="#文字标签" class="headerlink" title="文字标签"></a>文字标签</h2><pre><code>基本文字标签：&lt;font&gt;&lt;/font&gt;
    属性：
        color:颜色
        size:大小（最大值:7，最小值:1，默认值:3）
        face:字体类型，即字体，直接写文字就可以
标题标签：&lt;h1&gt;&lt;/h1&gt;-&lt;h6&gt;&lt;/h6&gt;
    随着数字的增大逐渐变小，字体是加粗的，内置字号 默认占据一行</code></pre><h2 id="清单标签（也称为列表标签）"><a href="#清单标签（也称为列表标签）" class="headerlink" title="清单标签（也称为列表标签）"></a>清单标签（也称为列表标签）</h2><pre><code>无序列表：&lt;ul&gt;&lt;/ul&gt;
    &lt;li&gt;&lt;/li&gt;:列表项
    属性：
        type：有三个值，分别为disc、 square和circle

    示例：
    &lt;ul &gt;
        &lt;li&gt;列表项&lt;/li&gt;
        &lt;li&gt;列表项&lt;/li&gt;
        &lt;li&gt;列表项&lt;/li&gt;                
    &lt;/ul&gt;

有序列表：&lt;ol&gt;&lt;/ol&gt;
    &lt;li&gt;&lt;/li&gt;:列表项
    属性：
        type：1、A、a、I、i（数字、字母、罗马数字）
        start:数字，代表首项开始位置

    示例：
    &lt;ol&gt;
        &lt;li&gt;列表项&lt;/li&gt;
        &lt;li&gt;列表项&lt;/li&gt;
        &lt;li&gt;列表项&lt;/li&gt;    
    &lt;/ol&gt;

列表标签的作用：实现菜单项（可以实现横向或者纵向菜单）
无序列表标签怎么去掉小圆点？HTML中不能直接去掉，没有这个属性值，需要在CSS中给li标签添加样式list-style:none;</code></pre><h2 id="图形标签：（自关闭标签）"><a href="#图形标签：（自关闭标签）" class="headerlink" title="图形标签：（自关闭标签）"></a>图形标签：<img>（自关闭标签）</h2><pre><code>属性：
    src:图形地址
    width:宽度
    height:高度
    border:边框
    align:对齐方式，代表图片与相邻的文本的相对位置（有三个属性值：top middle bottom）
    alt:图片的文字说明</code></pre><h2 id="链接标签："><a href="#链接标签：" class="headerlink" title="链接标签："></a>链接标签：<a></a></h2><pre><code>属性：
    href:跳转页面地址
    name:名称，锚点
    target:_self(自己) _blank(新页面,之前的页面还有)， 默认是_self
作用：
    （1）页面跳转，注意：要调到外网必须要加协议
    （2）访问锚点；回到锚点（顶部、底部、中间），在访问锚点时的书写格式：#name的值；</code></pre><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><pre><code>&lt;table&gt;&lt;/table&gt;:
    属性：
        border:表格边框
        width:表格的宽度
        align:表格的对齐方式（&lt;tr align=&quot;center&quot;&gt;单元格里面的内容居中对齐&lt;tr&gt;）
        bgcolor:背景颜色
&lt;tr&gt;&lt;/tr&gt;: 代表行
&lt;td&gt;&lt;/td&gt;：代表单元格
    属性：
        colspan:列合并
        rowspan:行合并
&lt;th&gt;&lt;/th&gt;：相等于&lt;td&gt;, 只是内置样式加粗居中
&lt;caption&gt;&lt;/caption&gt;：表格的标题，即表头

表格的作用：
    (1)简单的实现一个表格样式
    (2)进行页面布局

示例：
&lt;table&gt;
    &lt;tr&gt;&lt;!--行--&gt;
        &lt;th&gt;表格标头&lt;/th&gt;
        &lt;td&gt;普通单元格&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;thead&gt;&lt;/thead&gt;、&lt;tbody&gt;&lt;/tbody&gt;、&lt;tfoot&gt;&lt;/tfoot&gt;
作用：分块加载，用户体验比较好</code></pre><h1 id="html表单标签-重点"><a href="#html表单标签-重点" class="headerlink" title="html表单标签(重点)"></a>html表单标签(重点)</h1><h2 id="form标签："><a href="#form标签：" class="headerlink" title="form标签："></a>form标签：<form></form></h2><pre><code>属性：    
    name:表单名称
    action:提交的路径地址
    method:提交方式（get和post）

    get和post的区别（重点）：
        (1)get提交将数据加在地址栏的后面，格式?name=value&amp;name=value；post提交将数据封装在请求体中
            ?username=zhangsan&amp;password=123&amp;sex=male&amp;hobby=football&amp;hobby=paiqiu&amp;city=bj#
        (2)get提交相对不安全；post提交相对安全
        (3)get提交有大小限制，根据浏览器不同而不同；post不限制大小

示例：
&lt;form&gt; 
    &lt;table&gt;
        &lt;!--form里面嵌套table--&gt;            
    &lt;/table&gt;            
&lt;/form&gt;</code></pre><h2 id="input标签："><a href="#input标签：" class="headerlink" title="input标签："></a>input标签：</h2><pre><code>&lt;input type=&quot; &quot;/&gt;
type属性:根据type属性实现各种不同功能的表单项；
    text：普通的文本输入框；
        name：username value=&quot;张三&quot;&lt;!--张三是默认值--&gt;
    password：密码输入框；特点是显示的是掩码
    radio：单选按钮
        name：如果想让一组单选按钮互斥，就用指定同意name属性值，需要加value属性值；
        checked：默认被选中；                
    checkbox：复选框；
        name：组的概念，需要加value属性值。
        checked：默认被选中；
    file：上传文件的控件
    button：普通按钮，没有任何内置的功能；
    submit：内置功能，点击会按照action地址提交
    reset：重置，点击会清空之前填写的内容
    image：图片按钮，功能类似与submit
        src：加载图片
        alt:图片的提示文字
    hidden:隐藏表单，作用是在提交数据的时候，服务器需要这个数据，但是不需要用户看到。

注意：name属性必须要写。</code></pre><h2 id="select标签-：下拉菜单"><a href="#select标签-：下拉菜单" class="headerlink" title="select标签()：下拉菜单"></a>select标签(<select></select>)：下拉菜单</h2><pre><code>属性：
    name;表单项的名称
option标签：可选项（下拉菜单之间的级联）
    属性：
        value，表单项的值
        selected：默认被选中</code></pre><h2 id="textarea-文本域标签"><a href="#textarea-文本域标签" class="headerlink" title="textarea:文本域标签"></a>textarea:文本域标签</h2><pre><code>属性：
    cols：列数
    rows：行数
注意：默认的文本值在标签体当中</code></pre><h1 id="html框架标签及其他"><a href="#html框架标签及其他" class="headerlink" title="html框架标签及其他"></a>html框架标签及其他</h1><h2 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h2><pre><code>frameset:
    属性：
        rows；按行划分
        cols：按列划分
        划分格式： rows=&quot;120,*&quot;
frame:
    属性：    
        name：名称，方便target根据name值进行定位
        src:加载的页面地址；</code></pre><h2 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h2><pre><code>&lt;meta&gt;
    &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;
    &lt;meta http-equiv=&quot;description&quot; content=&quot;this is my page&quot;&gt;
    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
&lt;link&gt;
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./styles.css&quot;&gt;
        href：引入css文件的地址
&lt;script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;&quot;&gt;&lt;/script&gt;
        src：js的文件地址</code></pre><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><pre><code>&amp;nbsp; 空格
&amp;gt;   大于号
&amp;lt;   小于号
&amp;copy; 版权符号
&amp;reg;  注册符号</code></pre><hr>
<blockquote>
    <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote>                
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>HTML简介以及其中的标签</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb(一)</title>
    <url>/2019/10/30/JavaWeb-%E4%B8%80/</url>
    <content><![CDATA[<p>大家好，最近学习了JavaWeb相关课程，写一篇博客来与大家分享我的学习心得。<br>俗话说的好啊，”工欲善其事，必先利其器”，今天这篇文章主要介绍了各种工具的的安装及使用。希望能对你有所帮助。</p>
<hr>
<h1 id="tomcat的配置"><a href="#tomcat的配置" class="headerlink" title="tomcat的配置"></a>tomcat的配置</h1><h2 id="tomcat的介绍"><a href="#tomcat的介绍" class="headerlink" title="tomcat的介绍"></a>tomcat的介绍</h2><ul>
<li>Tomcat是<font color="red">Apache</font> 软件基金会的Jakarta项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。</li>
<li>因为Tomcat <font color="red">技术先进、性能稳定，而且免费</font>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</li>
<li>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于<font color="red">轻量级</font>应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是<font color="red">独立运行</font>的，所以当你运行tomcat 时，它实际上作为一个与Apache独立的进程单独运行的。</li>
</ul>
<h2 id="tomcat的下载"><a href="#tomcat的下载" class="headerlink" title="tomcat的下载"></a>tomcat的下载</h2><ul>
<li><p>1、你可以去官网下载，官网上有最新的，还有以前的发行版本，我用的是7.0版本的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ http://tomcat.apache.org/</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、当然我也可以把我的分享给你</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 百度网盘链接：https://pan.baidu.com/s/187gmmNmJwnVy7ss4AcrKnQ  提取码：ebt5</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="tomcat主要目录的介绍"><a href="#tomcat主要目录的介绍" class="headerlink" title="tomcat主要目录的介绍"></a>tomcat主要目录的介绍</h2><p><img src="https://s2.ax1x.com/2019/10/30/K51QQU.png" alt="JavaWeb1_1"></p>
<!--![JavaWeb1_1](/images/JavaWeb1_1.png)  -->
<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><ul>
<li>启动的前提<br>  配置<font color="red">JAVA_HOME</font>:<br>  进入到F:\apache-tomcat-7.0.52\bin&gt;startup.bat 才能执行命令</li>
<li>找到bin文件下的startup.bat文件，双击就可以运行了，如果运行出错，有可能是你的端口号被占用，tomcat默认端口号是8080，如果被占用你可以修改conf文件夹下的server.xml，位置如下面所示：<pre><code>&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;
       connectionTimeout=&quot;20000&quot;
       redirectPort=&quot;8443&quot; /&gt;</code></pre></li>
</ul>
<hr>
<h1 id="MyEclipse的安装及激活"><a href="#MyEclipse的安装及激活" class="headerlink" title="MyEclipse的安装及激活"></a>MyEclipse的安装及激活</h1><h2 id="MyEclipse的介绍"><a href="#MyEclipse的介绍" class="headerlink" title="MyEclipse的介绍"></a>MyEclipse的介绍</h2><ul>
<li>1、广泛的技术积累：MyEclipse为团队在所有厂商的流行技术之间提供了很好的平衡。从Spring、REST 到Maven，在单一堆栈下统一开发，支持你所需要的一切。</li>
<li>2、多种应用服务器上轻松测试：多种内置的服务器连接器用于监控你的应用运行。部署的应用服务器包括WebSphere、Glassfish、WebLogic和Tomcat等等。为了应对极速测试，提供了即时可用的集成化MyEclipse Tomcat和Derby服务器。</li>
<li>3、可视化编辑器加速编码：编码的方式一定要最适合自己—资源或可视化编辑。可视化编辑能节省时间，但是代码助手资源始终让你得心应手。</li>
<li>4、MyEclipse是用专门用来开发JavaWeb工程的，其功能比eclipse强大许多，它集成了JavaWeb开发所需的jar包，使用方便。</li>
</ul>
<h2 id="MyEclipse的下载"><a href="#MyEclipse的下载" class="headerlink" title="MyEclipse的下载"></a>MyEclipse的下载</h2><ul>
<li><p>1、这个资源有很多我就不多介绍了，其中1一个就是官网。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://www.myeclipsecn.com/</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、当然还有我自己用的，我用的是2010版本的，版本号比较低，这个看个人喜好了，当然我不太建议你去下载最新的，因为可能它不太稳定，不利于你程序的开发。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 百度网盘链接：https://pan.baidu.com/s/1Iq7y7LRyt1mjJKfvPq0uzA  提取码：mdap</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、另外myeclipse需要激活，这个可以从网上找到很多激活码，这个我就不做过多的介绍了，如果需要可以联系我。</p>
</li>
<li><p>4、<font color="red">激活</font>就在你安装完成之后，会出现一个<font color="red">许可证按钮</font>，点击这个按钮，然后把你找的激活码输入进去就可以了。</p>
</li>
</ul>
<hr>
<h1 id="将tomcat部署到MyEclipse"><a href="#将tomcat部署到MyEclipse" class="headerlink" title="将tomcat部署到MyEclipse"></a>将tomcat部署到MyEclipse</h1><ul>
<li>把tomcat部署到MyEclipse可以更加方便的启动tomcat，比直接在bin文件夹下启动更加便捷。部署如下图所示：</li>
<li>1、先点击上方工具栏的<font color="red">window</font>，如下图所示：<br><img src="https://s2.ax1x.com/2019/10/31/KTtG5D.png" alt="JavaWeb1_3"></li>
<li>2、点击window下面的<font color="red">preference</font>，在所搜框内输入<font color="red">tomcat</font>，然后选择版本，<br><img src="https://s2.ax1x.com/2019/10/31/KTU900.png" alt="JavaWeb1_4"></li>
<li>之后选择tomcat所在文件目录<br><img src="https://s2.ax1x.com/2019/10/31/KTUu0x.png" alt="JavaWeb1_5"></li>
</ul>
<hr>
<h1 id="将工程添加到tomcat中"><a href="#将工程添加到tomcat中" class="headerlink" title="将工程添加到tomcat中"></a>将工程添加到tomcat中</h1><ul>
<li><font size="4">最后给大家说一下如何在MyEclipse中把工程添加到tomcat中：</font></li>
<li><font size="3">第一步:找到服务器所在的窗口，也就是<font color="red">Servers</font></font><br><img src="https://s2.ax1x.com/2019/10/31/KTdedx.png" alt="JavaWeb1_6"></li>
<li><font size="3">第二步:右键点击<font color="red">tomcat7.0</font>，在出来的菜单中点击<font color="red">Add Deployment…</font>，然后在出来的窗口内选择你要部署的工程。</font><br><img src="https://s2.ax1x.com/2019/10/31/KTdHTx.png" alt="JavaWeb1_7"></li>
</ul>
<hr>
<p>最后谢谢各位看官的支持，我会继续写下去的。</p>
<blockquote>
    <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote>]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>tomcat的配置</tag>
        <tag>MyEclipse的安装</tag>
        <tag>将tomcat部署到MyEclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github和hexo搭建博客(四)</title>
    <url>/2019/10/20/%E4%BD%BF%E7%94%A8github%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E5%9B%9B/</url>
    <content><![CDATA[<p>这是第三篇介绍通过hexo博客框架和github搭建个人博客的分享，希望能对你有所帮助。本篇博客主要介绍编辑工具Sublime Text的安装和本地Hexo的编辑以及把本地博客文件部署到Github。</p>
<hr>
<h1 id="Sublime-Text的安装"><a href="#Sublime-Text的安装" class="headerlink" title="Sublime Text的安装"></a>Sublime Text的安装</h1><ul>
<li><p>Sublime Text是什么：<br>  1、Sublime Text具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。<br>  2、Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。.<br>  3、Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。<br>  4、我们主要使用Sublime Text编辑<font color="red">.md</font>文件和<font color="red">.yml</font>文件。</p>
</li>
<li><p>Sublime Text的官网</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ http://www.sublimetext.com/</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接在官网下载。</p>
</li>
</ul>
<hr>
<h1 id="本地博客文章的建立与编辑"><a href="#本地博客文章的建立与编辑" class="headerlink" title="本地博客文章的建立与编辑"></a>本地博客文章的建立与编辑</h1><h2 id="文章的创建"><a href="#文章的创建" class="headerlink" title="文章的创建"></a>文章的创建</h2><ul>
<li>在上一篇创建的文件夹中点击右键，打开Git Bash Here，然后使用下面的命令：</li>
<li>创建博客的新文章，使用Sublime打开路径为<font color="red">\博客名\source_posts\文章名.md</font>进行编辑。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"文章名(自定义)"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="本地博客部署到Github"><a href="#本地博客部署到Github" class="headerlink" title="本地博客部署到Github"></a>本地博客部署到Github</h1><h2 id="配置-config-yml文件-下面只标注了需要修改的项目"><a href="#配置-config-yml文件-下面只标注了需要修改的项目" class="headerlink" title="配置_config.yml文件(下面只标注了需要修改的项目)"></a>配置_config.yml文件(下面只标注了需要修改的项目)</h2><ul>
<li><p>站点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Jack  // 网站标题</span><br><span class="line">subtitle: Jack // 网站副标题</span><br><span class="line">description: Jack  // 网站描述</span><br><span class="line">author: Jack  // 您的名字</span><br></pre></td></tr></table></figure>
</li>
<li><p>URL配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line">url: http://blogwenbo.com/  // https://+仓库名</span><br></pre></td></tr></table></figure>
</li>
<li><p>Git的部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>: git // 类型</span><br><span class="line">repo: http://github.com/Ferryman-Jack/Ferryman-Jack.github.io.git // 仓库链接地址</span><br><span class="line">branch: master  // 分支</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="博客配置文件填写完毕，进行上传测试-按照下列命令进行"><a href="#博客配置文件填写完毕，进行上传测试-按照下列命令进行" class="headerlink" title="博客配置文件填写完毕，进行上传测试(按照下列命令进行)"></a>博客配置文件填写完毕，进行上传测试(按照下列命令进行)</h2><ul>
<li><p>首先配置用户名及密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">"GitHub账号绑定的邮箱地址"</span></span><br><span class="line">git config --global user.name <span class="string">"GitHub账号名"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>清空博客缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成静态博客文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署博客到远端,如果出现保持请点击<a href="https://gclcode.github.io/2019/07/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAHexo-deploy%E5%91%BD%E4%BB%A4%E6%8A%A5%E9%94%99/#more" target="_blank" rel="noopener">解决办法</a>进行查看,如果没有报错那就是成功了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<blockquote>
    <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote>]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>github与hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github和hexo搭建博客(三)</title>
    <url>/2019/10/20/%E4%BD%BF%E7%94%A8github%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%B8%89/</url>
    <content><![CDATA[<p>这是第三篇介绍通过hexo博客框架和github搭建个人博客的分享，希望能对你有所帮助。这篇博客主要介绍hexo在本地的安装。</p>
<hr>
<h1 id="Hexo本地安装"><a href="#Hexo本地安装" class="headerlink" title="Hexo本地安装"></a>Hexo本地安装</h1><h2 id="详细操作可以去Hexo查看"><a href="#详细操作可以去Hexo查看" class="headerlink" title="详细操作可以去Hexo查看"></a>详细操作可以去<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>查看</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://hexo.io/zh-cn/</span><br></pre></td></tr></table></figure>

<h2 id="新建Blog-可自定义名-后，在文件夹中点击右键点击Git-Bash-Here后输入下面的命令："><a href="#新建Blog-可自定义名-后，在文件夹中点击右键点击Git-Bash-Here后输入下面的命令：" class="headerlink" title="新建Blog(可自定义名)后，在文件夹中点击右键点击Git Bash Here后输入下面的命令："></a>新建Blog(可自定义名)后，在文件夹中点击右键点击Git Bash Here后输入下面的命令：</h2><ul>
<li><p>安装hexo框架</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化博客文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init <span class="string">"博客名(自定义)"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入初始化的博客文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"博客名(你自定义的名)"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装博客依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地启动你的博客</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="由于Hexo启动是默认主题，本机4000端口的博客样式应该与下面的一样："><a href="#由于Hexo启动是默认主题，本机4000端口的博客样式应该与下面的一样：" class="headerlink" title="由于Hexo启动是默认主题，本机4000端口的博客样式应该与下面的一样："></a>由于Hexo启动是默认主题，本机4000端口的博客样式应该与下面的一样：</h2><p><img src="https://s2.ax1x.com/2019/10/20/KutPfK.png" alt="github3"></p>
<ul>
<li>至此hexo已经在本地安装完成了。你可以通过点击<a href="http://localhost:4000" target="_blank" rel="noopener">此处</a>查看。下面是本地博客地址：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ http://localhost:4000</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li>现在建立的博客还只能自己本地查看，别人不能查看，如果想要别人查看，需要把本地的内容部署到远端，这个内容我们下期介绍。</li>
<li>如果你对hexo的命令还不熟悉，你可以查看<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">Hexo</a>的官方文档</li>
</ul>
<hr>
<blockquote>
    <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>github与hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github和hexo搭建博客(二)</title>
    <url>/2019/10/16/%E4%BD%BF%E7%94%A8github%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%BA%8C/</url>
    <content><![CDATA[<p>这是第二篇使用hexo博客框架和Github搭建自己的博客的分享，希望对大家有所帮助。这篇博客主要介绍Github仓库的建立和SSH的配置。</p>
<hr>
<h1 id="Github仓库的建立"><a href="#Github仓库的建立" class="headerlink" title="Github仓库的建立"></a>Github仓库的建立</h1><h3 id="什么是Github的库？"><a href="#什么是Github的库？" class="headerlink" title="什么是Github的库？"></a>什么是Github的库？</h3><ul>
<li>GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub</li>
<li>GitHub for Windows 是一个 Metro 风格应用程序，集成了自包含版本的 Git，bash 命令行 shell，PowerShell 的 posh-git 扩展。GitHub 为 Windows 用户提供了一个基本的图形前端去处理大部分常用版本控制任务，可以创建版本库，向本地版本库递交补丁，在本地和远程版本库之间同步。微软也通过CodePlex向开发者提供 git 版本控制系统，而 GitHub 创造了一个更具有吸引力的 Windows 版本。</li>
</ul>
<h3 id="登录Github"><a href="#登录Github" class="headerlink" title="登录Github"></a>登录Github</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://github.com/</span><br></pre></td></tr></table></figure>

<ul>
<li>登录你已经注册并激活的账号，点击 <font color="red">Repositories</font>后在点击<font color="red">New</font>。<br><img src="https://s2.ax1x.com/2019/10/16/KkFgYj.png" alt="github2-1"><br><img src="https://s2.ax1x.com/2019/10/16/KkFflq.png" alt="github2-2"></li>
<li>填写仓库信息: 为了方便以后的操作，仓库的链接格式可以按照图片中的格式写。另外仓库名必须与注册的用户名<font color="red">一致</font>，不然在本地提交的时候会<font color="red">报错</font>。<br><img src="https://s2.ax1x.com/2019/10/16/KkkVjP.png" alt="github2-3"></li>
</ul>
<hr>
<h1 id="SSH的配置"><a href="#SSH的配置" class="headerlink" title="SSH的配置"></a>SSH的配置</h1><h2 id="为什么要配置SSH"><a href="#为什么要配置SSH" class="headerlink" title="为什么要配置SSH"></a>为什么要配置SSH</h2><ul>
<li>Git使用https协议，每次pull, push都要输入密码，相当的烦。<br>使用git协议，然后使用ssh密钥。这样可以省去每次都输密码。</li>
<li>公钥我们一般是给服务器的,他们到时候在权限中加入我给的公钥,然后当我从远地仓库中下载项目的时候,我在git clone xxx的时候，那个服务器我通过他的绑定的公钥来匹配我的私钥，这个时候,如果匹配,则就可以正常下载,如果不匹配,则失败.</li>
<li>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。</li>
</ul>
<h2 id="配置-SSH-Keys"><a href="#配置-SSH-Keys" class="headerlink" title="配置 SSH Keys"></a><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-mac" target="_blank" rel="noopener">配置 SSH Keys</a></h2><ul>
<li><p>在任意位置点击鼠标右键，在弹出的窗口内点击<font color="red">Git Bash Here</font>，然后输入下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>会让你输入保存位置，不用管，直接使用默认位置就可以了</p>
</li>
</ul>
<h2 id="检查SSH"><a href="#检查SSH" class="headerlink" title="检查SSH"></a>检查SSH</h2><ul>
<li><p>进入到SSH目录，。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示文件夹内的文件，查看是否存在id_rsa.pub文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看并复制id_rsa.pub中key的信息，文本信息具体如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi id_rsa.pub</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="https://s2.ax1x.com/2019/10/16/KkZ3IU.png" alt="github2-4"></p>
<ul>
<li>1、然后依次打开<font color="red">Github网站</font> -&gt; <font color="red">Settings</font> -&gt; <font color="red">SSH And GPG Keys</font></li>
<li>2、点击<font color="red">New SSH Key</font>按钮</li>
<li>3、添加Title和Key<pre><code>tiile：随便输入即可，如果是我自己的电脑，则可以输入lidaze macbook
Key: 粘贴即可</code></pre></li>
<li>4、重新输入Github的密码即可</li>
</ul>
<blockquote>
    <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>github与hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github和hexo搭建博客(一)</title>
    <url>/2019/10/14/%E4%BD%BF%E7%94%A8github%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%B8%80/</url>
    <content><![CDATA[<p>这是我第一次搭建博客，为了方便身旁的小伙伴能够想我一样搭建一个自己的博客，我决定把自己搭建博客的流程分享给大家。我这个博客是通过github和hexo框架共同搭建起来的，属于静态博客。本篇博客主要分享Node.js的下载及安装和github账号的注册以及Git For Windows的下载安装</p>
<hr>
<ul>
<li><p>为什么要安装Node.js和Git For Windows:<br>  a 我们使用的博客框架是hexo，Hexo 是一个快速、简洁且高效的博客框架。<br>  b Hexo是由Node.js和Git For Windows支持的<br>  c hexo的具体安装你可以前往hexo的官网进行查看和了解</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://hexo.io/zh-cn/docs/</span><br></pre></td></tr></table></figure>
</li>
<li><p>由于Git For Windows的下载非常慢，我这里提供两种下载方式，当然你也可以去<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>下载，不过需要翻墙。<br>  1、百度网盘的链接（Node.js和Git For Windows的安装包）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 网盘链接：https://pan.baidu.com/s/1tm2IajXo-wLin0w4WetpTA  提取码：ooty</span><br></pre></td></tr></table></figure>

<p>  2、你也可以参考这个<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">页面</a></p>
</li>
</ul>
<hr>
<h1 id="Node-js的下载及安装"><a href="#Node-js的下载及安装" class="headerlink" title="Node.js的下载及安装"></a>Node.js的下载及安装</h1><h3 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h3><ul>
<li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</li>
<li>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。</li>
<li>Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。</li>
</ul>
<h3 id="v10-16-3版本的Node-js的下载链接"><a href="#v10-16-3版本的Node-js的下载链接" class="headerlink" title="v10.16.3版本的Node.js的下载链接:"></a>v10.16.3版本的Node.js的下载链接:</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://nodejs.org/dist/v10.16.3/node-v10.16.3-x64.msi</span><br></pre></td></tr></table></figure>

<h3 id="Node-js的官方下载地址"><a href="#Node-js的官方下载地址" class="headerlink" title="Node.js的官方下载地址:"></a>Node.js的官方下载地址:</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://nodejs.org/en/</span><br></pre></td></tr></table></figure>

<h3 id="Node-js的下载"><a href="#Node-js的下载" class="headerlink" title="Node.js的下载"></a>Node.js的下载</h3><p><img src="https://s2.ax1x.com/2019/10/15/K9MufH.png" alt="Nodejs.png"></p>
<h3 id="Node-js的安装及验证"><a href="#Node-js的安装及验证" class="headerlink" title="Node.js的安装及验证"></a>Node.js的安装及验证</h3><ul>
<li>Node.js的安装和其他桌面应用程序一样，一直点下一步，直到安装完成。</li>
<li>在cmd命令行窗口中，使用node -v命令进行查看安装的Node.js的版本，如果获得下面的输出，恭喜你，你已经成功的安装了Node.js<br><img src="https://s2.ax1x.com/2019/10/15/K9Qcrt.png" alt="nodev"></li>
</ul>
<hr>
<h1 id="github账号的注册"><a href="#github账号的注册" class="headerlink" title="github账号的注册"></a>github账号的注册</h1><h3 id="github是什么"><a href="#github是什么" class="headerlink" title="github是什么:"></a>github是什么:</h3><ul>
<li>要了解Github，我们首先要知道Git，Git是管理代码的工具，写代码不是件轻松的事儿，一个人写的时候已经不轻松了，一群人写就更不轻松了，但这世界上很多事都是怎么不轻松怎么来的，大部分人都会和别人一起写代码，问题在于，这么多人写一个东西，你今天写一点，我明天写一点，然后发现你写错了，又影响到了我前天写的，最后汇总的时候怎么查找错误？又在什么时候汇总？这些问题太多了。为了让写代码这件事儿美好一点，我们有了一种名叫代码管理的东西，Git正是其中之一，我使用过的还有SVN，但是今天我们只讲Git。</li>
<li>Git的核心思想是『分布式』，我们在服务器上面有一个『主仓库』，这里放的是拿得出台面的代码，我们也可以在自己的电脑上创建分支，这些分支由『主仓库』克隆而来，然后我们就可以愉快的在自己的电脑上写代码了，写完代码可以同步在自己电脑的分支里面，当你觉得自己的代码拿得出台面，我们可以申请把自己的代码更新到『主仓库』里面，一旦通过这样的审核，我们就对『主仓库』做了某种贡献，世界各地的杰出程序员不断的为一个项目的『主仓库』做贡献，让这个项目变得越来越完善。</li>
<li>Github是运用Git思想来工作的一个商业网站，所有开发者都可以在Github上面为自己的项目创建一个『主仓库』，好的项目就像狼群中的小鲜肉一样，大量的开发者会把这个主仓库中的代码克隆到自己的『分仓库』去，用更性感的话来说，就是『Fork』。</li>
<li>Git的方式的确很优雅，但问题在于，会有人愿意把自己辛辛苦苦的代码拿出来公布，并且让人Fork么？<br>会，不仅会，而且很多，Github有超过140万用户，你可能会撇撇嘴说那个啥啥社交软件都有2000万用户，区区140万算个啥。可是这140万用户几乎涵盖了这个世界上最优秀的开发者，我相信，你那个有2000W用户的社交软件的工程师，肯定也是用Github的。任何项目，在Github上面获得fork或star，都意味着其它工程师对这个项目的认可，这比100个QQ空间的赞更有价值。</li>
<li>为什么这些优秀的工程师会开源自己的项目？<br>因为开源是一种精神</li>
</ul>
<h3 id="github的官网"><a href="#github的官网" class="headerlink" title="github的官网"></a>github的官网</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://github.com/</span><br></pre></td></tr></table></figure>

<h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><ul>
<li>按照图片上的提示填写用户名、密码和邮箱之后，点击<font color="red">Sign up for GitHub</font>完成注册的第一步。<br><img src="https://s2.ax1x.com/2019/10/15/K98GFK.png" alt="github1-1"></li>
<li>完成图片验证后按照下边的图片选择免费版即可，点击Continue完成注册的第二步。<br><img src="https://s2.ax1x.com/2019/10/15/K9tIu4.png" alt="github1-2"></li>
<li>下边的三个问题随便填写后点击Submit或者直接点击skip this step即可完成GitHub账号的注册<br><img src="https://s2.ax1x.com/2019/10/15/K9NkPP.png" alt="github1-3"></li>
<li>完成注册后的用户界面如下图所示，这时候的账号还不能立即使用。还需要验证你的邮箱，打开邮箱点击GitHub放给我们的邮件中的链接即可验证邮箱。<br><img src="https://s2.ax1x.com/2019/10/15/K9NLZj.png" alt="github1-4"></li>
</ul>
<hr>
<h1 id="Git-For-Windows的下载安装"><a href="#Git-For-Windows的下载安装" class="headerlink" title="Git For Windows的下载安装"></a>Git For Windows的下载安装</h1><h3 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h3><ul>
<li>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>
<li>就是一个帮我们管理文件版本的程序，专业名称叫：分布式版本控制系统。</li>
<li>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</li>
</ul>
<h3 id="Git的官网"><a href="#Git的官网" class="headerlink" title="Git的官网"></a>Git的官网</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://git-scm.com/</span><br></pre></td></tr></table></figure>

<h3 id="下载Git，点击红框即可下载"><a href="#下载Git，点击红框即可下载" class="headerlink" title="下载Git，点击红框即可下载"></a>下载Git，点击红框即可下载</h3><p><img src="https://s2.ax1x.com/2019/10/15/K9dNqg.png" alt="github1-5"></p>
<h3 id="Git的安装及验证"><a href="#Git的安装及验证" class="headerlink" title="Git的安装及验证:"></a>Git的安装及验证:</h3><ul>
<li>Git的安装和Node.js的安装差不多，一直点击下一步，直到安装完成。</li>
<li>Git的验证和Node.js的验证方式和Node.js的方式差不多，都是在cmd命令行窗口进行的，输入git –version，如果你获得了如下输出，恭喜你，你成功了。<br><img src="https://s2.ax1x.com/2019/10/15/K90vxP.png" alt="github1-6"><blockquote>
<p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote></li>
</ul>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>github与hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>红尘客栈</title>
    <url>/2019/08/15/hello-world/</url>
    <content><![CDATA[<p>大家好，这是我第一次搭建博客，许多地方还不太熟悉，我希望通过写博客，总结自己所学，希望能给你提供帮助，通过这个平台与大家相互交流和共同进步，谢谢。</p>
<p><img src="https://s2.ax1x.com/2019/10/20/KMci5T.jpg" alt="初次见面"></p>
<blockquote>
    <p>本文作者：Jack<br>版权声明：未经授权禁止使用，转载请说明出处！</p>
</blockquote>]]></content>
      <categories>
        <category>初次见面</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
